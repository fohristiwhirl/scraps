// From electronbridge package...

var effect_done_channels = make(map[int]chan bool)
var effect_done_channels_MUTEX sync.Mutex

type SpecialMsgContent struct {
	Effect			string						`json:"effect"`
	EffectID		int							`json:"effectid"`
	Uid				int							`json:"uid"`
	Args			[]interface{}				`json:"args"`
}

func listener() {

		/* Other stuff */

		if type_obj.Type == "effect_done" {

			var effect_done_msg IncomingEffectDone

			err := json.Unmarshal(scanner.Bytes(), &effect_done_msg)

			if err != nil {
				continue
			}

			effect_done_channels_MUTEX.Lock()
			ch := effect_done_channels[effect_done_msg.Content.EffectID]
			effect_done_channels_MUTEX.Unlock()

			if ch != nil {
				go effect_notifier(ch)
			} else {
				Logf("Received done for effect %d but no notifier was known", effect_done_msg.Content.EffectID)
			}
		}

		/* Other stuff */
}

func effect_notifier(ch chan bool) {
	ch <- true
}

func (w *GridWindow) Special(effect string, timeout_duration time.Duration, args []interface{}) {

	// Special effects. What is available depends on the contents of the html page.

	c := SpecialMsgContent{
		Effect: effect,
		Uid: w.Uid,
		EffectID: effect_id_maker.next(),
		Args: args,
	}

	m := OutgoingMessage{
		Command: "special",
		Content: c,
	}

	s, err := json.Marshal(m)
	if err != nil {
		panic("Failed to Marshal")
	}

	// We make a channel for the purpose of receiving a message when the effect completes,
	// and add it to the global map of such channels.

	ch := make(chan bool)

	timeout := time.NewTimer(timeout_duration)

	effect_done_channels_MUTEX.Lock()
	effect_done_channels[c.EffectID] = ch
	effect_done_channels_MUTEX.Unlock()

	// With that done, it's safe to send the message. When we receive the reply, we'll be ready.

	OUT_msg_chan <- fmt.Sprintf("%s\n", string(s))

	// Now we wait for the message that the effect completed...
	// Or the timeout ticker to fire.

	ChanLoop:
	for {
		select {
		case <- ch:
			break ChanLoop
		case <- timeout.C:
			Logf("Timed out waiting for effect %d (%s)", c.EffectID, effect)
			break ChanLoop
		}
	}

	effect_done_channels_MUTEX.Lock()
	delete(effect_done_channels, c.EffectID)
	effect_done_channels_MUTEX.Unlock()
}

// From main.js

if (j.command === "special") {
	windows.special(j.content);
}

ipcMain.on("effect_done", (event, opts) => {
	let windobject = windows.get_windobject_from_event(event);
	let output = {
		type: "effect_done",
		content: {
			uid: windobject.uid,
			effectid: opts.effectid,
		}
	}
	write_to_exe(JSON.stringify(output));
});

// From windows.js

function special(content) {
	let windobject = windobjects[content.uid];
	send_or_queue(windobject, "special", content);
}

// From grid.html

renderer.finish_effect_after = (t, opts) => {
	setTimeout(() => renderer.finish_effect(opts), t);
};

renderer.finish_effect = (opts) => {
	renderer.virtue.clearRect(0, 0, canvas.width, canvas.height);
	ipcRenderer.send("effect_done", {effectid: opts.effectid});
};

renderer.special = (opts) => {
	renderer.finish_effect(opts)
	// FIXME: actually use effects.
}

ipcRenderer.on("special", (event, opts) => {
	if (!renderer.inited) {
		return;
	}
	renderer.special(opts);
});
